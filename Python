
00:02 Transition from C to Python
- python offers abstraction over lower level ideas
- python is readible + has a lot more libraries you can use than C

03:11 In Python, programs no longer need to be compiled before running, unlike C programs.
instead of writing something like: 
clang o hello hello.c -lcs50
./hello

you can now write:
python hello.py
- files now end in .py
- clang is a compiler but python/.py is an interpreter so it doesn't need to compile 0's and 1's

Python speller:

#set is a colleciton of things that won't contain duplicates
words = set()

#creating a function called check() that takes as input a word
def check(word)
    #checking if a word is in that said of words
    return word.lower() in words

def load(dictionary)
    #opening dictionary as a variable called file
    with open(dictionary) as file:
        #update the set of words to be the updated ver of whatever's in this file as a result of reading it an splitting it's lines
        #splitlining splits the big, long column of words in the file into one big collecton
        words.update(file.read().splitlines())
    return True

def size():
    return len(words)
    #len or length is a function in python


def unload():
    #nothing to unload in python b/c python manages ur memory for u
    return True


Why Python vs C?
- Python = slower than C and seems to take up more space than C
- Python tends to be more readible than C

Filter example for bluring an image:
from PTL import Image, ImageFilter

before = Image.open("bridge.bmp")
after = before.filter(ImageFilter.BoxBlur(10))
after.save("out.bmp")

Installing a library for facial recognition:
pip install face_recgnition 


22:05 In Python, you import the name of the library instead of including a .h file, allowing for more precise control over the specific functions you want to use.
- ie import cs50
- can even be more precise: from cs50 import get_string

In python you can implement the idea of getting a user's name (from user input) like:
answer = get_string("What's your name? "
print("hello," + answer)

- "+" in this context just joins the 2 strings together
- don't have to declare the type of variable in python

can even do:
answer = get_string("What's your name? "
print("hello,", answer)
- Python can figure out that it should join the 2 variables and put a single space between them

Format string or f string as the most common way to join strings togther
answer = get_string("What's your name? "
print(f"hello," {answer}")
- Python will interpreolate whatever is inside {} to plug in the value for you
- Kinda like %s

Example:
from cs50 import get_string

answer = get_string("What's your name? ")
print(f"hello, {answer}")

**In Python you don't even need to use get_string**
- get string uses input() in python where input() is basically get_string

answer = input("What's your name? ")
print(f"hello, {answer}")

31:50 Python makes variable declaration and manipulation simpler.
when making a counter variable can do:
counter += 1

-no ++ or -- in Python :(

33:54 Python simplifies variable types for ease of use.
Python uses datatypes:
- bool
- float
- int
- str

x = int input(("x: "))
y = int(input("y: "))

print(x + y)


39:52 Converting x and y to integers in Python using int() function.

Example:
x = int input(("x: "))
y = int(input("y: "))

print(x + y)
- in Python you can nest functions where you can call one function and then pass its output as the input to another function 
- this in turn lets us convert strings to int
- int in the context of python is a function where it takes a str (string) and returns a numeric or an integral equivalent

- in python you get hash tables for free!
43:43 Importing libraries and avoiding function collisions in Python.
do:
import cs50

x = cs50.get_int("x: ")
y = cs50.get_int("y: "

print(x + y)

45:45 Python uses indentation instead of curly braces for code blocks
-conditionals in python

if x < y:
    print("x is less than y")

can then do:

if x < y 
    print("x is less than y")
elif x > y:
    print("x is greater than y")
else:
    print("x is equal to y")

49:32 Python strings behave differently than in C
from cs50 import get_int

x = get_int("What's x? ")
y = get_int("What's y? ")

if x < y:
    print("x is less thnan y")
elif x > y:
    print("x is greater than y")
else:
    print("x is equal to y")

Strings are more intuitive in Python:
s = input("s: ")
t = input("t: ")

if s ==t:
    print("Same")
else:
    print("Different")

Object Oriented Programming (OOP)
- your variables and your data types can have functionalities built into them
- documentation of "methods" (functions) that come with strings

55:43 Designing a solution for handling Y and Yes without capitalization.
- Strings in Python come with built-in functions for operations like uppercase, lowercase, etc.
Example:
s = input("Do you agree? ")

#in object oriented programming if s is a string, then it is an object in Python
#An object can have values/attributes inside of them as well as functionality built into them. Just like C with a struct where you want to go inside something, you use the dot operator
#in C we would have done s = tolower(s) where we pass in the value of s
s = s.lower()

#in keyword checks if a variable is in a collection of values
if s in ["y", "yes"]:
    print("Agreed")
elif s in ["n", "no"]:
    print("Not agreed")


1:01:46 Introduction to using loops in Python
While loop example:
i = 0
while i < 3
    print("meow")
    i += 1

For loop example (bad design) where you want to do something 3 times so you type in 3 numbers:
for i in[0, 1, 2]
    print("hello, world")

1:07:23 Python makes looping easier than C using iterable objects.

For better design use range() and do:
for i in range(3)
    print("hello, world")

can even just use an underscore instead of i with:
for _ in range(3)
    print("hello, world")

Forever loop in Python:

while True:
    print("meow")

1:09:23 Python's print() function can customize line endings.
- Named Parameters lets you pass in a 2nd argument in print called end and set it equal ot something else (default perameter is \n)
Example: 
before = input("Before: ")
print("After: ", end ="")
for c in before:
    print(c.upper(), end = "")
print()

*We don't even need to loop over the entire string b/c strings themselves come with methods*
So we can just do:
before = input("Before: ")
print("After: ", end ="")
for c in before:
print(before.upper())

and even:

before = input("Before: ")
after = before.upper()
print(f"After: {after}")

and EVEN

before = input("Before: ")
print(f"After: {before.upper()}")

- in C we've been assuming our parameters are positional

1:15:29 Defining and calling a custom function in Python

#put main part of the code at the top of the file
def main()
    for i in range(3):
        meow()

#can define helper functions like meow
def meow():
    print("meow")

#call main at the end to run all the code
main()


1:19:24 Enhancing function implementation with parameters in Python
#put main part of the code at the top of the file
def main():
    meow(3)

#can define helper functions like meow
#giving meow a parameter n
def meow(n):
    for i in range(n):
        print("meow")

#call main at the end to run all the code
main()

1:21:13 Python handles truncation differently than C
x = int(input("x: "))
y = int(input("y: "))

z = x / y
#50 print out 50 digits (rounding precision stuff)
print(f"{z:.50f}")

1:25:00 Python has advantages over C in handling floating point precision and integer overflow.
- Integer overflow not a problem in Python b/c it reserves memory for you as your integers grow


1:30:51 The get_int() function in Python involves input, conversion to integer, and exception handling for ValueError.

def get_int(prompt):
    while True:
    try:
        return int(input(prompt))
    except ValueError:
        print("Not an integer")
        #or can put "pass" to use while loop silently 

def main():
    x = get_int("x: ")
    y = get_int("y: ")

    print(x + y)

main()

1:32:41 Handling exceptions in Python and using loops to create Mario-like structures

getting a row of 4 bricks: 

print("?" * 4)

Nested loops can look like:

for i in range(3):
    for j in range(3):
        print("#", end="")
    print()

1:38:36 Python lists automatically handle memory and are like linked lists
- len() tells you the length of a list

scores = [72, 73, 33]

average = sum(scores) / len(scores)
print(f"Average: {average}")

1:42:30 Python allows for easy manipulation of lists using built-in functions and methods.

1:44:38 Adding lists in Python and linear search
Pedantic version:
names = ["Carter", "David", "John"]

name = input("Name: ")

for n in names:
    if name == n:
        print("Found")
        break

#you can use an else clause in a for loop
else:
    print("Not found")

Linear search method:

names = ["Carter", "David", "John"]

name = input("Name: ")

if name in names:
    print("Found")

#you can use an else clause in a for loop
else:
    print("Not found")


1:48:20 Python allows for efficient searching and data storage using dictionaries.
people = {
    #if you only have 2 key value pairs you can use a dictionary instead of a list
    "Carter": "+1-617-495-1000",
    "David": "1-555-555-5555"
    "John": "1-467-535-2222"
}

name = input("Name: ")

for person in people:
    #in Python you can index into dictionaries (you would use the dot operator in C)
    if person["name"] == name:
        print(f"Found{number}")
        break
else:
    print("Not found")


1:50:25 Creating a list of dictionaries in Python
1:54:35 Python uses square brackets with strings to access dictionary instead of dot notation used in C.
1:56:26 You can simplify dictionaries and use single quotes to avoid mixing double quotes in Python.

people = {
    #if you only have 2 key value pairs you can use a dictionary instead of a list
    "Carter": "+1-617-495-1000",
    "David": "1-555-555-5555"
    "John": "1-467-535-2222"
}

name = input("Name: ")

for person in people:
    #in Python you can index into dictionaries (you would use the dot operator in C)
    if person["name"] == name:
        print(f"Found{number}")
        break
else:
    print("Not found")

2:00:44 Using command-line arguments and sys library in Python
- sys library for system functionality in python

from sys import argv

if len(argv) == 2:
    print(f"hello, {argv[1]}")
else:
    print("hello, world")


2:02:44 Using sys module in Python for command-line arguments and program exits.
import sys

if len(sys.argv) != 2:
    print("Missing command-line argument")
    sys.exit()

print(f"hello, {sys.argv[1]}")
sys.exit(0)

2:07:01 Creating QR code in Python.
import qrcode

img = qrcode.make("https://youtu.be/xvFZjo5PgG0)
img.save("qr.png", "PNG")

